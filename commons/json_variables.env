

###### JSON VARIABLES ######

## MAP OF THE AVAILABLE VERSIONS AND TEMPLATES
AVAILABLE_VERSIONS_JSON='
{
    "availableVersions": [
      {
        "version": "1.11.0",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_11_0"
      },
      {
        "version": "1.11.1",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_11_1"
      },
      {
        "version": "1.11.2",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_11_2"
      },
      {
        "version": "1.12.0",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_12_0"
      },

      {
        "version": "1.12.1",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_12_1"
      },
      {
        "version": "1.12.2",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_12_2"
      },
      {
        "version": "1.12.3",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_12_3"
      },
      {
        "version": "1.13.0",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_13_0"
      },
      {
        "version": "1.13.1",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_13_1"
      },
      {
        "version": "1.13.2",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_13_2"
      },
      {
        "version": "1.13.3",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_13_3"
      },
      {
        "version": "1.14.0",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_14_0"
      },
      {
        "version": "1.14.1",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_14_1"
      },
      {
        "version": "1.14.2",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_14_2"
      },
      {
        "version": "1.14.3",
        "overridesTemplateNonProd": "OVERRIDES_NONPROD_YAML_1_14_3"
      }
    ]
  }
'
## MENU OPTIONS
MENU_OPTIONS_JSON='
{
    "Manual Menu Options": [
      {
        "name": "Change Variables",
        "flag": "FLAG_CHANGE_VARIABLES"
      },
      {
        "name": "1.1: Enable APIs",
        "flag": "FLAG_ENABLE_APIS"
      },
      {
        "name": "1.2: Create an organization",
        "flag": "FLAG_CREATE_ORG"
      },
      {
        "name": "1.3.1: Create an environment",
        "flag": "FLAG_CREATE_ENV"
      },
      {
        "name": "1.3.2: Create an environment group",
        "flag": "FLAG_CREATE_ENV_GROUP"
      },
      {
        "name": "2.1: Create the Kubernetes Cluster",
        "flag": "FLAG_CREATE_CLUSTER_STEP"
      },
      {
        "name": "2.2: Download Helm Charts",
        "flag": "FLAG_HELM_CHARTS"
      },
      {
        "name": "2.3: Create the Apigee Namespace",
        "flag": "FLAG_NAMESPACE"
      },
      {
        "name": "2.4: Create Service Accounts",
        "flag": "FLAG_CREATE_SA"
      },
      {
        "name": "2.5: Create TLS Certs",
        "flag": "FLAG_CREATE_TLS_CERTS"
      },
      {
        "name": "2.6: Create the Overrides",
        "flag": "FLAG_CREATE_OVERRIDES"
      },
      {
        "name": "2.7: Enable Synchronizer access",
        "flag": "FLAG_ENABLE_SYNCHRONIZER"
      },
      {
        "name": "2.8: Install cert manager",
        "flag": "FLAG_INSTALL_CERT_MANANGER"
      },
      {
        "name": "2.9: Install Apigee Hybrid CRDs",
        "flag": "FLAG_INSTALL_CRDS"
      },
      {
        "name": "[DEPRECATED] 2.10: Check cluster readiness",
        "flag": "FLAG_CHECK_CLUSTER_READINESS"
      },
      {
        "name": "2.11: Install Apigee hybrid Using Helm",
        "flag": "FLAG_HELM_INSTALL"
      },
      {
        "name": "[WIP] 2.12: (Optional) Configure Workload Identity",
        "flag": "FLAG_CONFIGURE_WIF"
      },
      {
        "name": "3.1: (Optional) Expose Apigee ingress gateway",
        "flag": "FLAG_EXPOSE_INGRESS_GATEWAY"
      }
    ],
    "Automatic Menu Options": [
      {
        "name": "Change Variables.",
        "flag": "FLAG_CHANGE_VARIABLES"
      },
      {
        "name": "Automatic Apigee Hybrid Installation.",
        "flag": "FLAG_AUTOMATIC_INSTALLATION"
      }
    ]
  }
'

## Create Cache Variables
CACHE_VARIABLES_JSON='
{
  "PROJECT_ID": "null",
  "ANALYTICS_REGION": "null",
  "APIGEE_HELM_CHARTS_HOME": "charts-home",
  "APIGEE_HYBRID_BASE": "hybrid",
  "ENV_NAME": "null",
  "ENV_GROUP": "null",
  "DOMAIN": "null",
  "CLUSTER_NAME": "null",
  "CLUSTER_LOCATION": "null",
  "CLUSTER_CHANNEL": "regular",
  "CLUSTER_NUM_NODES": "3",
  "CLUSTER_VERSION": "1.30.2-gke.1587003",
  "CLUSTER_MACHINE_TYPE": "e2-standard-4",
  "CLUSTER_IMAGE_TYPE": "COS_CONTAINERD",
  "CLUSTER_DISK_TYPE": "pd-balanced",
  "CLUSTER_DISK_SIZE": "500",
  "VPC_NETWORK": "default",
  "CHART_VERSION": "1.13.1",
  "CHART_REPO": "oci://us-docker.pkg.dev/apigee-release/apigee-hybrid-helm-charts",
  "CERT_MANAGER_RELEASE": "1.15.1",
  "CASSANDRA_REPLICA_COUNT": "3",
  "CASSANDRA_STORAGE_CAPACITY": "20Gi",
  "CASSANDRA_REQUESTS_CPU": "500m",
  "CASSANDRA_REQUESTS_MEM": "1Gi",
  "CASSANDRA_MAX_HEAP_SIZE": "512M",
  "CASSANDRA_HEAP_NEW_SIZE": "100M",
  "APIGEE_NAMESPACE": "apigee",
  "INGRESS_NAME": "ingr",
  "CASSANDRA_HOST_NETWORK": "false",
  "OVERRIDES_FILE_NAME": "overrides.yaml",
  "UNIQUE_INSTANCE_IDENTIFIER": "null",
  "ADMIN_EMAIL": "null",
  "EXPOSE_INGRESS_GATEWAY": "NONPROD",
  "PROD_TYPE": "NONPROD"
}
'

RUNTIME_CACHE='
{
  "ORG_NAME": "null",
  "LONG_RUNNING_OPERATION_ID": "null",
  "SA_NONPROD_FILE_NAME": "null",
  "TOKEN": "null",
  "PATH_TO_CERT_FILE": "null",
  "PATH_TO_KEY_FILE": "null",
  "RUNTIMETYPE": "HYBRID",
  "ENABLE_LOGGER": "true"
}
'

RUNTIME_FLAGS='
{
  "DUMMY": "null",
}
'


##### POPULATOR #####
UNIQUE_INSTANCE_IDENTIFIER=$(< /dev/urandom tr -dc 'a-z' | head -c 60)
CLUSTER_NAME=$(< /dev/urandom tr -dc 'a-z' | head -c 10)
ENV_GROUP=$(< /dev/urandom tr -dc 'a-z' | head -c 10)
ENV_NAME="$(< /dev/urandom tr -dc 'a-z' | head -c 5)" && ENV_NAME="${ENV_NAME}${ENV_GROUP}"
INGRESS_NAME=$(< /dev/urandom tr -dc 'a-z' | head -c 15)
DOMAIN="$(< /dev/urandom tr -dc 'a-z' | head -c 15).$(< /dev/urandom tr -dc 'a-z' | head -c 15).com"

##### CHANGE THE VALUES #####
helpVar=
newVal=
popList=("UNIQUE_INSTANCE_IDENTIFIER"
"CLUSTER_NAME"
"ENV_GROUP"
"ENV_NAME"
"INGRESS_NAME"
"DOMAIN"
)

for each in ${popList[@]}; do
  newVal="${!each}"
  helpVar=$(jq --arg nval "${newVal}" --arg nkey "${each}" '.[$nkey] = $nval' <<< "$CACHE_VARIABLES_JSON" )
  CACHE_VARIABLES_JSON="${helpVar}"
done


## 


